=== Concept and Goals

mµOS is supposed to be a general purpose Operating-System for small
Microcontrollers. With small/proper configuration it scales down to AVR ATTiny
where some have less than 100 Bytes of RAM and less than 2 kByte of Program
Flash. The main focus is on getting Projects efficently and robustly done in
short time.

The core of mµOS is a Scheduler which serves function calls from
few queues (Timer and 2 Priorities by default). This approach was choosen to
minimize resource demands. Everything is served only by one Stack. There are
no threads or context switches, but there is some facility to call the
Scheduler recursively.

Ideally users code always runs synchronously from these queues which are
scheduled by the mainloop provided by mµOS. Interrupts are handled by
'drivers' and do the bare minimum necessary to serve the request, postpone any
further processing themself onto the work queues.

This means that there are less possiblities of race conditions and in many
cases a user doesn't need to care for synchronization (unless writing drivers).

Still any resource which is not managed by mµOS is available to the user and
can be freely accessed and configured. This is a deliberate design decision to
put mµOS between bare-metal programming and some more complete OS.

Everything is implemented in modern C (with some GNU extensions) as far as
possible. While space conserving is high priority, obscure optimizations in
assembler are not!

When possible mµOS reuses existing Platform and C libraries, but also adds its
own concepts and API's breaking history with POSIX and other common API's
whenever there are some reasons to do so.
