#+TITLE: My micro OS (event scheduler)

this document is WIP!
* Why
  Because we can..

* Development
  The first WIP versions of mµOS are developed for the avr-gcc/avr-libc
  toolchain, with some portability in mind. It is later planned to extend this
  to other platforms like stm32 which *may* require some refinements on the
  API's. General aim is still to stay as simple as the avr toolchain to make
  mirgration for any programmer coming from Atmel programming to Stm32 (and
  perhaps others) as easy as possible. Still we will make no compromises in
  functionality where required.

* Howto
** Configuring
   edit Makefile
** Includes
** Programming
   * dont use 'main()'
   * initialization is in 'void init(void)' by default
     * init runs with interrupts still disabled and clock stopped
     * init() should setup hardware
     * push functions on the queues to do the work
     * interrupts are enabled and timer starts just after init()

** Building

   just 'make'
   other targets


* Concept

** Schedule functioncalls
   mµOS is about events and scheduling functions from different queues.

** Clock
   One hardware timer is used to implement a global clock. Events can be
   scheduled based on this clock. The configuration of this timer (prescaler,
   which hardware timer to be used) is left open to the user.

*** Adjustments and Skew
    Once started the clock generally only increments.

    PLANNED: when syncronization with the real time is intended one may set it
    once in the initialization routine and later call some apis to adjust it
    slowly, by skipping a beat or increment the counter in small increments
    (the api ensures that not events get lost).

*** Datatypes
    The full time is defined by the global overflow counter and the timers
    internal count register. The global overflow counter can be selected from
    various unsigned integer types (16, 32, 64 bit wide), the internal timer
    counter register extends this value by its size, enabling rather high
    resolution clocks from 24 up to 80 bits precision. Depending on the
    circumstances one should select a proper size so that overflows dont
    happen or don't matter.

    There are following types defined:

    * muos_clock
      Generic type used for modeate long timespans. Depending on configuration
      overflows may occur rarely (or preferably never).

      Also type for the overflow counter.

    * muos_shortclock
      Type for short time intervals. Used in the realtime priority quite for
      events which are scheduled closely.

    * muos_hwclock
      The type of the hardware timer

    * muos_fullclock
      a structure containing the whole clock state with the high bits stored
      as muos_clock and the low bits stored as muos_hwclock. When properly
      configured this state should never overflow for the application runtime.

*** Timer interrupts
    the clock and timer needs 2 interrupts

**** overflow
    increments the global counter, wakes mainloop

**** comparematch
    only wakes mainloop


** Queues
   Functions in Queues running synchronously

*** Priority Queues

**** PLANNED ltpq long time queue
     * uses longer, absolute time format (muos_clock or muos_fullclock)
     * needs more memory
     * handled from the clpq (one regular job at each cycles moves elements
       form ltpq to clpq)
     * optional only needed for 'calendar' like events, may be short, only as
       much long time events the program uses at most

**** DONE clpq short time realtime queue
     * uses a sliding window implementation
       more memory conserving, schedules events in near future

*** Work Queues
    Most processing should be done by queueing functioncalls into one of the
    following queues. Functions can be pushed onto this queues at the front for
    highest priority (immediate execution) or at the back for fair scheduling.


**** Queue datatypes and sizes
     one can select one of 3 implementations for the queues from which at
     compiletime.

     * one uses 4bit indices on a bitfield (a byte split in half),
       allows for queue size up to 16 entries for very small microcontrollers
       such attinys
     * one uses byte indices, which is the default, allowing queues up to 256
       entries.
     * and one uses uint16_t indices for large queues (up to 64k entries).

     Note that when functioncalls with one intptr_t argument are pushed on a
     queue, it will take 2 entries (one for the functionpointer and one for the argument)

     Queues can be defined to any size within their indexable range and are a
     fixed sized array in RAM.


**** Default Queues

***** DONE Realtime Queue (rtq)
      Will be processed before any bgq events

***** DONE Background Queue (bgq)
      Is processed in the mainloop when nothing else (rtq) is to do. when the
      bgq (and rtq) is empty, the mainloop goes to sleep waiting for interrupts
      to wake up.


** Error log
   table of last errors
   SUCCESS gets overwritten
   otherwise same errors get merged

   later: read/write error log to serial and eeprom



** Interrupts
   Should do only the most minimal work, possibly pushing further events on
   the Work Queues. User define Interrupt handlers may call the rtq processing
   loop at the end.

*** PLANNED Interrupt hooks? adding interrupt handlers dynamically


* Q&A Common Problems
  - lto related problems
    like lto1: fatal error: errors during merging of translation units
    * gives poor error messages
    * saves a *lot* space
  - collect2: error: ld returned 1 exit status
    * Symbol defined multiple times

* Directory Structure
  Only notably files are mentioned

** src
   - Makefile
     sets some configuration variables and includes the
     muos/muos.mk Main Makefile


*** muos
   - muos.c
     the main() loop

   - *.c *.h
     C Source and include files

   - muos.mk
     Main Makefile variable and rules setup for building mµOS, will include all other
     Makefiles.

   - prg_$(PROGRAMMER).mk
     Default variables and rules for programmers

**** lib
     Library routines used by other facilities.
     Usually don't handle interupt disable/enable unless specifically required.


**** hw
     All hardware macro and functions have the prefix 'MUOS_HW_' or 'muos_hw_'

     - hwdef.h
       dispatches the including of the actual (most specific) hardware
       definiton file below

***** atmel
      hardware abstractions for atmel chips, organized from most specific chip
      up to generic includes for the respecive platform.

      - platform.mk
        Makefile for building this this platform

      - *.h
        Hardware specific include files,

        - macros to create Hardware specific register names

        - simple 'static inline' functions to operate on this registers

        - abstraction of interupt handling routines

* Planned

** Testing

*** other types for timer (16 bit, different sizes)

** watchdog
   timeout for rtq, bgq
   how to detect timeouts on clq?

** PLANNED Indirect jump tables for queues
   register all 'callable' functions in one array. The queues can then
   index this table by uint8_t or shorter.

** PLANNED system clock
   oscal calibration on external pulse

** Library

** HAL


** HLD (high level drivers)
*** gpio
    configure (in out pullup)
    set, clear, toggle
*** Serial
*** PWM
*** EEprom
*** Flash
*** Fuses
*** Watchdog

*** USB
*** bangbus
*** onewire
*** DCF77
*** OSCAL
*** CPPM
*** logfs
*** PID++
** Debug tools
